---
layout: post
title:  "[cuda] Pi Calculus using cuda"
date:   2014-05-04 12:29:41
categories: cuda
---


A really short sample of pi calculus using CUDA follows:

{% highlight c++ %}
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>


#define STEPS           2000
#define THREADS_PER_BLOCK   512
#define BLOCKS_PER_GRID     512
#define PI25DT          3.141592653598793238462643

void pi_calc(int intervals){
    int  i;
    double sum, pi;
    sum=0.0;
    for (i=1; i<=intervals; i++){ 
        double x=((double) i-0.5)/ ((double)intervals);
        sum=sum+(4.0/(1.0+x*x));
    }
    pi=sum/intervals;
    printf("CPU - pi %.7f\n", pi);
}


__global__ void piThread( double * device_array, int * intervals){
    int threadIndex = blockDim.x * blockIdx.x + threadIdx.x;
    int start = threadIndex * STEPS + 1;
    __shared__ int i;
    __shared__ double sum;
    __shared__ double x;
    sum=0.0f;
    i = 0;
    
    for (i = start; i< (start + STEPS); i++){ 
        x=((double) i-0.5) / (* intervals) ;
        sum=sum+(4.0/(1.0+x*x));
    }
    device_array[threadIndex]=sum;
}

void cuda_launch(int intervals){
    int i;  
    int * device_intervals  = 0;
    double sum      = 1.0f;
    double pi       = 0.0f;
    double *device_array    = NULL;
    double * array      = NULL;
    int size        = sizeof(double) * THREADS_PER_BLOCK * BLOCKS_PER_GRID ;

    // alloc memory
    array =(double*)malloc(size);
    cudaMalloc((void **)&device_array, size );
    cudaMalloc((void **)&device_intervals, sizeof(int) );

    cudaMemcpy((void*)device_intervals, (void*)&intervals, sizeof(int), cudaMemcpyHostToDevice);    
    
    // invoke threads   
    piThread<<<BLOCKS_PER_GRID,THREADS_PER_BLOCK>>>(device_array, device_intervals);

    cudaMemcpy((void*)array, (void*)device_array, size, cudaMemcpyDeviceToHost);

    for(i = 0; i < THREADS_PER_BLOCK * BLOCKS_PER_GRID; i++){
        sum+=array[i];  
    }
    pi = sum / intervals;

    // print results
    printf("CUDA - pi is  %.7f\n", pi);

    // dealloc memory
    cudaFree(device_array);
    free(array);
    return;
}

int main(void){
    clock_t cpu_start_time;
    clock_t cpu_end_time;
    clock_t gpu_start_time;
    clock_t gpu_end_time;
    int intervals = STEPS * THREADS_PER_BLOCK * BLOCKS_PER_GRID;

    cpu_start_time = clock();
    pi_calc(intervals);
    cpu_end_time  = clock();

    gpu_start_time = clock();
    cuda_launch(intervals);
    gpu_end_time = clock();
    
    clock_t cpu_time = cpu_end_time - cpu_start_time;
    clock_t gpu_time = gpu_end_time - gpu_start_time;


    double cpu_time_double = (double)cpu_time;
    double gpu_time_double = (double)gpu_time;

    printf("cpu_time: %f\n", cpu_time_double);
    printf("gpu_time: %f\n", gpu_time_double);
    
    double gpu_cpu_ratio = gpu_time_double / cpu_time_double ;
    double cpu_gpu_ratio = cpu_time_double / gpu_time_double ;
    printf("gpu / cpu : %f\n", gpu_cpu_ratio);  
    printf("gpu / cpu : %f\n", cpu_gpu_ratio);      
        
    return 0;
}

{% endhighlight %} 
